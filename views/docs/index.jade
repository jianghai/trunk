extends ../layout
block head
  link(rel='stylesheet', href='/stylesheets/docs/index.css')
block main
  .sidebar
    ul
      li.active
        a(href='#overview') Overview
      li
        a.class(href='#view') Trunk.View
        ul
          li
            a.property(href='#view-events') events
          li
            a.events(href='#') events
          li
            a.static(href='#') extend
          li
            a.method(href='#') render
          li
            a.method(href='#') render
  .content.flex-1
    section#overview 
      h1 Overview
      p Trunk.js把前端开发划分成view（页面最终呈现，事件交互）、model（view背后逻辑、数据处理）和collection(模型集合)，view和model一一对应作为一个微观世界。view因业务需求可能变得很复杂，所以支持嵌套，即一个微观世界里可能囊括多个微观世界。随着越来越多的微观世界产生，那些通用的逻辑、操作、现象就可以抽象出一个抽象的世界（本身也可能是nested）。到最后，前端开发就像搭积木一样简单而又清晰。
      include ../include/structure.svg
      //- p 当你处理一些业务逻辑，用jQuery选择元素绑定事件写一堆面条式代码变得混乱不清时；当你ajax获取json数据拼装繁杂的html时；
      
      p 如上图，一一对应的view和model构成了一个组件（component），组件的最大作用就是提高代码的可复用性，组件本身可以直接实例化或者被其他view、model继承（严格意义上Trunk.View和Trunk.Model是一个最基础的组件）。

      p 跨模块通信由事件驱动，典型的观察者模式。
      pre
        :highlight(lang='js')
          // Register event
          view1.listen(model2, 'save', function() {
            // Do something
          })
          // Fire event
          model2.trigger('save')
    - each module in doc
      section(id=module.name)
        h1= module.name
        p= module.desc
        - each prop in module.props
          - var name = prop.name
          - if (prop.param) {
          -   var params = prop.param.map(function(item) {
          -     return !item.optional ? item.name : '[' + item.name + ']'
          -   }).join(', ')
          -   name += '( ' + params + ' )'
          - }
          h2(class=prop.kind)= name
          ol
            each param in prop.param
              li 
                | {#{param.type}} 
                | #{param.name} #{param.desc}
            li
              b return 
              | {#{prop.return.type}} #{prop.return.desc}
          if prop.description
            each desc in prop.description
              if typeof desc === 'string'
                p= desc
              else
                pre!= desc.code





